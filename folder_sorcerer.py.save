#!/usr/bin/env python3
"""
Folder Sorcerer v1.0
Author: Howard Dominic (GitHub: howard-dominic)
D#!/usr/bin/env python3
"""
Folder Sorcerer v1.0
Author: Howard Dominic (GitHub: howard-dominic)
Description: Automatically organize your messy folders by type and date, rename screenshots, and avoid duplicates.
"""

import os
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict
for file in files:
    # your processing code


console = Console()

# -------- CONFIG --------
# Define file type categories
FILE_TYPES: Dict[str, tuple] = {
    "Documents": (".pdf", ".docx", ".doc", ".txt", ".xlsx", ".pptx"),
    "Pictures": (".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff"),
    "Videos": (".mp4", ".mkv", ".avi", ".mov"),
    "Music": (".mp3", ".wav", ".flac"),
    "Archives": (".zip", ".rar", ".tar", ".gz"),
    "Code": (".py", ".js", ".html", ".css", ".cpp", ".c", ".java"),
    "Screenshots": (".png", ".jpg")  # We'll detect patterns later
}

# Optional: dry run mode
DRY_RUN = False

# ------------------------

def get_creation_date(file_path: Path) -> str:
    """Return creation date as YYYY/MM format"""
    stat = file_path.stat()
    date = datetime.fromtimestamp(stat.st_ctime)
    return f"{date.year}/{date.strftime('%B')}"

def make_dest_folder(base_folder: Path, category: str, date_folder: str) -> Path:
    """Create destination folder if not exists"""
    dest = base_folder / category / date_folder
    dest.mkdir(parents=True, exist_ok=True)
    return dest

def rename_if_exists(dest: Path, file_name: str) -> str:
    """Avoid overwriting by appending timestamp"""
    target = dest / file_name
    if not target.exists():
        return file_name
    name, ext = os.path.splitext(file_name)
    timestamp = datetime.now().strftime("%H%M%S")
    return f"{name}_{timestamp}{ext}"

def organize_folder(target_folder: Path):
    """Core function to organize files"""
    if not target_folder.exists() or not target_folder.is_dir():
        console.print(f"[red]Error:[/] Folder {target_folder} does not exist!")
        return

    console.print(f"[bold green]Organizing folder:[/] {target_folder}\n")

    for file in track(target_folder.iterdir(), description="Processing files..."):
        if file.is_file():
            moved = False
            for category, extensions in FILE_TYPES.items():
                if file.suffix.lower() in extensions:
                    # Special check for screenshots
                    if category == "Screenshots" and "screenshot" not in file.name.lower():
                        continue

                    date_folder = get_creation_date(file)
                    dest = make_dest_folder(target_folder, category, date_folder)
                    new_name = rename_if_exists(dest, file.name)
                    if DRY_RUN:
                        console.print(f"[yellow]Dry run:[/] {file.name} -> {dest / new_name}")
                    else:
                        shutil.move(str(file), str(dest / new_name))
                    moved = True
                    break
            if not moved:
                # Uncategorized files
                dest = make_dest_folder(target_folder, "Others", "Misc")
                new_name = rename_if_exists(dest, file.name)
                if DRY_RUN:
                    console.print(f"[yellow]Dry run:[/] {file.name} -> {dest / new_name}")
                else:
                    shutil.move(str(file), str(dest / new_name))
    console.print("\n[bold blue]Folder organization complete![/]")

# -------- MAIN --------
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Folder Sorcerer: Organize your folders magically")
    parser.add_argument("folder", type=str, help="Target folder to organize")
    parser.add_argument("--dry-run", action="store_true", help="Preview changes without moving files")

    args = parser.parse_args()
    DRY_RUN = args.dry_run
    target = Path(args.folder).expanduser()
    organize_folder(target)
